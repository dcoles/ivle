#!/usr/bin/python

# usage:
#   python-console <port> <magic> [<working-dir>]

import cjson
import codeop
import cPickle
import cStringIO
import md5
import os
import Queue
import signal
import socket
import sys
import traceback
from threading import Thread

import common.chat
import common.util

# This version must be supported by both the local and remote code
PICKLEVERSION = 0

class Interrupt(Exception):
    def __init__(self):
        Exception.__init__(self, "Interrupted!")

class ExpiryTimer(object):
    def __init__(self, idle):
        self.idle = idle
        signal.signal(signal.SIGALRM, self.timeout)

    def ping(self):
        signal.alarm(self.idle)

    def start(self, time):
        signal.alarm(time)

    def stop(self):
        self.ping()

    def timeout(self, signum, frame):
        sys.exit(1)

class StdinFromWeb(object):
    def __init__(self, cmdQ, lineQ):
        self.cmdQ = cmdQ
        self.lineQ = lineQ

    def readline(self):
        self.cmdQ.put({"input":None})
        expiry.ping()
        action, params = self.lineQ.get()
        if action == 'chat':
            return params
        elif action == 'interrupt':
            raise Interrupt()

class StdoutToWeb(object):
    def __init__(self, cmdQ, lineQ):
        self.cmdQ = cmdQ
        self.lineQ = lineQ
        self.remainder = ''

    def _trim_incomplete_final(self, stuff):
        '''Trim an incomplete UTF-8 character from the end of a string.
           Returns (trimmed_string, count_of_trimmed_bytes).
        '''
        tokill = common.util.incomplete_utf8_sequence(stuff)
        if tokill == 0:
            return (stuff, tokill)
        else:
            return (stuff[:-tokill], tokill)

    def write(self, stuff):
        # print will only give a non-file a unicode or str. There's no way
        # to convince it to encode unicodes, so we have to do it ourselves.
        # Yay for file special-cases (fileobject.c, PyFile_WriteObject).
        # If somebody wants to write some other object to here, they do it
        # at their own peril.
        if isinstance(stuff, unicode):
            stuff = stuff.encode('utf-8')
        self.remainder = self.remainder + stuff

        # if there's less than 128 bytes, buffer
        if len(self.remainder) < 128:
            return

        # if there's lots, then send it in 1/2K blocks
        while len(self.remainder) > 512:
            # We send things as Unicode inside JSON, so we must only send
            # complete UTF-8 characters.
            (blk, count) = self._trim_incomplete_final(self.remainder[:512])
            self.cmdQ.put({"output":blk.decode('utf-8', 'replace')})
            expiry.ping()
            action, params = self.lineQ.get()
            self.remainder = self.remainder[512 - count:]

        # Finally, split the remainder up into lines, and ship all the
        # completed lines off to the server.
        lines = self.remainder.split("\n")
        self.remainder = lines[-1]
        del lines[-1]

        if len(lines) > 0:
            lines.append('')
            text = "\n".join(lines)
            self.cmdQ.put({"output":text.decode('utf-8', 'replace')})
            expiry.ping()
            action, params = self.lineQ.get()
            if action == 'interrupt':
                raise Interrupt()

    def flush(self):
        if len(self.remainder) > 0:
            (out, count) = self._trim_incomplete_final(self.remainder)
            self.cmdQ.put({"output":out.decode('utf-8', 'replace')})
            expiry.ping()
            action, params = self.lineQ.get()
            # Leave incomplete characters in the buffer.
            # Yes, this does mean that an incomplete character will be left
            # off the end, but we discussed this and it was deemed best.
            self.remainder = self.remainder[len(self.remainder)-count:]
            if action == 'interrupt':
                raise Interrupt()

class WebIO(object):
    """Provides a file like interface to the Web front end of the console.
    You may print text to the console using write(), flush any buffered output 
    using flush(), or request text from the console using readline()"""
    # FIXME: Clean up the whole stdin, stdout, stderr mess. We really need to 
    # be able to deal with the streams individually.
    
    def __init__(self, cmdQ, lineQ):
        self.cmdQ = cmdQ
        self.lineQ = lineQ
        self.stdin = StdinFromWeb(self.cmdQ, self.lineQ)
        self.stdout = StdoutToWeb(self.cmdQ, self.lineQ)

    def write(self, stuff):
        self.stdout.write(stuff)

    def flush(self):
        self.stdout.flush()

    def readline(self):
        self.stdout.flush()
        return self.stdin.readline()

class PythonRunner(Thread):
    def __init__(self, cmdQ, lineQ):
        self.cmdQ = cmdQ
        self.lineQ = lineQ
        self.webio = WebIO(self.cmdQ, self.lineQ)
        self.cc = codeop.CommandCompiler()
        Thread.__init__(self)

    def execCmd(self, cmd):
        try:
            # We don't expect a return value - 'single' symbol prints it.
            self.eval(cmd)
            self.curr_cmd = ''
            self.webio.flush()
            return({"okay": None})
        except:
            self.curr_cmd = ''
            self.webio.flush()
            tb = format_exc_start(start=2)
            return({"exc": ''.join(tb).decode('utf-8', 'replace')})

    def run(self):
        # Set up global space and partial command buffer
        self.globs = {}
        self.curr_cmd = ''

        # Set up I/O to use web interface
        sys.stdin = self.webio
        sys.stdout = self.webio
        sys.stderr = self.webio

        # Handlers for each action
        actions = {
            'chat': self.handle_chat,
            'block': self.handle_block,
            'globals': self.handle_globals,
            'call': self.handle_call,
            'execute': self.handle_execute,
            'setvars': self.handle_setvars,
            }

        # Run the processing loop
        while True:
            action, params = self.lineQ.get()
            try:
                response = actions[action](params)
            except Exception, e:
                response = {'error': repr(e)}
            finally:
                self.cmdQ.put(response)
                   
    def handle_chat(self, params):
        # Set up the partial cmd buffer
        if self.curr_cmd == '':
            self.curr_cmd = params
        else:
            self.curr_cmd = self.curr_cmd + '\n' + params

        # Try to execute the buffer
        try:
            cmd = self.cc(self.curr_cmd, '<web session>')
            if cmd is None:
                # The command was incomplete, so send back a None, so the              
                # client can print a '...'
                return({"more":None})
            else:
                return(self.execCmd(cmd))
        except:
            # Clear any partial command
            self.curr_cmd = ''
            # Flush the output buffers
            sys.stderr.flush()
            sys.stdout.flush()
            # Return the exception
            tb = format_exc_start(start=3)
            return({"exc": ''.join(tb).decode('utf-8', 'replace')})

    def handle_block(self, params):
        # throw away any partial command.
        self.curr_cmd = ''

        # Try to execute a complete block of code
        try:
            cmd = compile(params, "<web session>", 'exec');
            return(self.execCmd(cmd))
        except:
            # Flush the output buffers
            sys.stderr.flush()
            sys.stdout.flush()
            # Return the exception
            tb = format_exc_start(start=1)
            return({"exc": ''.join(tb).decode('utf-8', 'replace')})

    def handle_globals(self, params):
        # Unpickle the new space (if provided)
        if isinstance(params, dict):
            self.globs = {}
            for g in params:
                try:
                    self.globs[g] = cPickle.loads(params[g])
                except:
                    pass

        # Return the current globals
        return({'globals': flatten(self.globs)})

    def handle_call(self, params):
        call = {}
        
        # throw away any partial command.
        self.curr_cmd = ''

        if isinstance(params, dict):
            try:
                # Expand parameters
                if isinstance(params['args'], list):
                    args = map(self.eval, params['args'])
                else:
                    args = []
                if isinstance(params['kwargs'], dict):
                    kwargs = {}
                    for kwarg in params['kwargs']:
                        kwargs[kwarg] = self.eval(
                            params['kwargs'][kwarg])
                else:
                    kwargs = {}

                # Run the fuction
                function = self.eval(params['function'])
                try:
                    call['result'] = function(*args, **kwargs)
                except Exception, e:
                    exception = {}
                    tb = format_exc_start(start=1)
                    exception['traceback'] = \
                        ''.join(tb).decode('utf-8', 'replace')
                    exception['except'] = cPickle.dumps(e,
                        PICKLEVERSION)
                    call['exception'] = exception
            except Exception, e:
                tb = format_exc_start(start=1)
                call = {"exc": ''.join(tb).decode('utf-8', 'replace')}
            
            # Flush the output buffers
            sys.stderr.flush()
            sys.stdout.flush()

            # Write out the inspection object
            return(call)
        else:
            return({'response': 'failure'})

    def handle_execute(self, params):
        # throw away any partial command.
        self.curr_cmd = ''
        
        # Like block but return a serialization of the state
        # throw away partial command
        response = {'okay': None}
        try:
            cmd = compile(params, "<web session>", 'exec');
            # We don't expect a return value - 'single' symbol prints it.
            self.eval(cmd)
        except Exception, e:
            response = {'exception': cPickle.dumps(e, PICKLEVERSION)}
           
        # Flush the output
        sys.stderr.flush()
        sys.stdout.flush()
               
        # Return the inspection object
        return(response)

    def handle_setvars(self, params):
        # Adds some variables to the global dictionary
        for var in params['set_vars']:
            try:
                self.globs[var] = self.eval(params['set_vars'][var])
            except Exception, e:
                tb = format_exc_start(start=1)
                return({"exc": ''.join(tb).decode('utf-8', 'replace')})

        return({'okay': None})

    def eval(self, source):
        """ Evaluates a string in the private global space """
        return eval(source, self.globs)

# The global 'magic' is the secret that the client and server share
# which is used to create and md5 digest to authenticate requests.
# It is assigned a real value at startup.
magic = ''

cmdQ = Queue.Queue()
lineQ = Queue.Queue()
interpThread = PythonRunner(cmdQ, lineQ)
terminate = None

# Default expiry time of 15 minutes
expiry = ExpiryTimer(15 * 60)

def initializer():
    interpThread.setDaemon(True)
    interpThread.start()
    signal.signal(signal.SIGXCPU, sig_handler)
    expiry.ping()

def sig_handler(signum, frame):
    """Handles response from signals"""
    global terminate
    if signum == signal.SIGXCPU:
        terminate = "CPU Time Limit Exceeded"

def dispatch_msg(msg):
    global terminate
    if msg['cmd'] == 'terminate':
        terminate = "User requested console be terminated"
    if terminate:
        raise common.chat.Terminate({"terminate":terminate})
    expiry.ping()
    lineQ.put((msg['cmd'],msg['text']))
    response = cmdQ.get()
    if terminate:
        raise common.chat.Terminate({"terminate":terminate})
    return response

def format_exc_start(start=0):
    etype, value, tb = sys.exc_info()
    tbbits = traceback.extract_tb(tb)[start:]
    list = ['Traceback (most recent call last):\n']
    list = list + traceback.format_list(tbbits)
    list = list + traceback.format_exception_only(etype, value)
    return ''.join(list)


# Takes an object and returns a flattened version suitable for JSON
def flatten(object):
    flat = {}
    for o in object:
        try:
            flat[o] = cPickle.dumps(object[o], PICKLEVERSION)
        except TypeError:
            try:
                o_type = type(object[o]).__name__
                o_name = object[o].__name__
                fake_o = common.util.FakeObject(o_type, o_name)
                flat[o] = cPickle.dumps(fake_o, PICKLEVERSION)
            except AttributeError:
                pass
    return flat

if __name__ == "__main__":
    port = int(sys.argv[1])
    magic = sys.argv[2]
    
    # Sanitise the Enviroment
    os.environ = {}
    os.environ['PATH'] = '/usr/local/bin:/usr/bin:/bin'

    if len(sys.argv) >= 4:
        # working_dir
        os.chdir(sys.argv[3])
        os.environ['HOME'] = sys.argv[3]

    # Make python's search path follow the cwd
    sys.path[0] = ''

    common.chat.start_server(port, magic, True, dispatch_msg, initializer)
