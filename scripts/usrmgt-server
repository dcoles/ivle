#!/usr/bin/python

import os
import sys
import logging

import conf
import common.db
import common.chat
import common.makeuser
import common.studpath

# usage:
#   usrmgt-server <port> <magic>

# User management operations:
#   - Create local user
#   - [Re]Create jail for a user
#       - Create a svn repository for a user
#           - create repository
#           - svn config
#           - svn auth
#       - /etc/passwd entry
#   - Disable a user's account
#   - Enable a user's account
#   - Remove a user
#   - Rebuild svn config
#   - Rebuild svn auth file
#   - Rebuild passwd + push to nodes.

def create_user(props):
    """Create the database record for the given user.
       Expected properties:
        login       - used as a unix login name and svn repository name.
                      STRING REQUIRED 
        unixid      - the unix uid under which execution will take place
                      on the behalf of the user. Don't use 0! If not specified
                      or None, one will be allocated from the configured
                      numeric range.
                      INT OPTIONAL
        password    - the clear-text password for the user. If this property is
                      absent or None, this is an indication that external
                      authentication should be used (i.e. LDAP).
                      STRING OPTIONAL
        email       - the user's email address.
                      STRING OPTIONAL
        nick        - the display name to use.
                      STRING REQUIRED
        fullname    - The name of the user for results and/or other official
                      purposes.
                      STRING REQUIRED
        rolenm      - The user's role. Must be one of "anyone", "student",
                      "tutor", "lecturer", "admin".
                      STRING/ENUM REQUIRED
        studentid   - If supplied and not None, the student id of the user for
                      results and/or other official purposes.
                      STRING OPTIONAL
       Return Value: the uid associated with the user. INT
    """

    common.makeuser.make_user_db(**props)
    user = common.db.get_user(props["login"])
    return user["unixid"]

def update_user(props):
    """Create the database record for the given user.
       Expected properties:
        login       - user who is making the change (not necessarily the one
                      being updated).
        update      - dict of fields to be updated. The fields are all those
                      in the login table of the db.
                      'login' required.
                      Omitted fields will not be set.
    """
    update = props['update']
    # Note: "login" is special - it is not part of the kwargs to
    # db.update_user, but the first arg - used to find the user to update.
    # However it doesn't need any special treatment here.

    db = common.db.DB()
    db.update_user(**update)
    db.close()

def activate_user(props):
    """Create the on-disk stuff for the given user.
       Sets the state of the user in the db from pending to enabled.
       Expected properties:
        login       - the user name for the jail
                      STRING REQUIRED
       Return Value: None
    """

    os.umask(0022) # Bad, but start_server sets it worse.

    login = props['login']

    db = common.db.DB()

    try:

        # FIXME: check we're pending

        details = db.get_user(login)

        # make svn config/auth

        repopath = os.path.join(conf.svn_repo_path, login)
        logging.debug("Creating user's Subversion repository")
        common.makeuser.make_svn_repo(repopath, throw_on_error=False)

        logging.debug("Rebuilding Subversion authorization config")
        try:
            common.makeuser.rebuild_svn_config()
        except:
            logging.warning('Rebuild of Subversion authorization config failed!')

        logging.debug("Adding Subversion authentication")
        passwd = common.makeuser.make_svn_auth(login, throw_on_error=False)
        logging.debug("passwd: %s" % passwd)

        logging.debug("Creating jail")
        common.makeuser.make_jail(login, details.unixid, svn_pass=passwd)

        logging.info("Enabling user")
        db.update_user(login, state='enabled')

        return {"response": "okay"}

    finally:
        db.close()

actions = {
        'create_user':create_user,
        'update_user':update_user,
        'activate_user':activate_user,
    }

def initializer():
    try:
        pidfile = open('/var/run/usrmgt-server.pid', 'w')
        pidfile.write('%d\n' % os.getpid())
        pidfile.close()
    except IOError, (errno, strerror):
        print "Couldn't write PID file. IO error(%s): %s" % (errno, strerror)
        sys.exit(1)

def dispatch(props):
    logging.debug(repr(props))
    action = props.keys()[0]
    return actions[action](props[action])

if __name__ == "__main__":
    if len(sys.argv) <3:
        print >>sys.stderr, "Usage: usrmgt-server <port> <magic>"
        sys.exit(1)
    port = int(sys.argv[1])
    magic = sys.argv[2]

    pid = os.getpid()

    logging.basicConfig(filename="/var/log/usrmgt.log", level=logging.INFO)
    logging.info("Starting usrmgt server on port %d (pid = %d)" % (port, pid))

    common.chat.start_server(port, magic, True, dispatch, initializer)
