#!/usr/bin/env python
# IVLE - Informatics Virtual Learning Environment
# Copyright (C) 2007-2009 The University of Melbourne
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""
Script to load the sample data into a fresh IVLE instance, for testing or
experimentation.
"""

import sys
import os
import shutil
import optparse
import subprocess
import logging
import readline
import warnings

import psycopg2

from ivle.config import Config
import ivle.svn

logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s',
    level=logging.INFO)

def runprog_stderr(*popenargs, **kwargs):
    """Run a program, using subprocess.Popen.
    Return None if the program had a 0 return code.
    Return the string stderr if the program failed.
    """
    kwargs['stderr'] = subprocess.PIPE

    proc = subprocess.Popen(*popenargs, **kwargs)
    _, stderr = proc.communicate()
    if proc.returncode == 0:
        return None
    else:
        return stderr

if os.getuid() != 0:
    print "Must run %s as root." % os.path.basename(sys.argv[0])
    sys.exit(1)

usage = """usage: %prog [OPTIONS] <SQL-FILE>
Loads the sample data into the installed IVLE instance."""

parser = optparse.OptionParser(usage)
parser.add_option("-f", "--force",
    action="store_true", dest="force",
    help="destroy all data without prompting",
    default=False
    )
parser.add_option("--pg-user",
    action="store", dest="pg_user",
    help="database super-user (for dropping and creating db) "
        "(default: postgres)",
    default="postgres"
    )

(options, args) = parser.parse_args()

if len(args) != 1:
    parser.error("incorrect number of arguments")

sqlfile = args[0]

dbconfig = Config()['database']

# Try creating the database (if it succeeds, no harm)
logging.info("Creating database \"%s\"." % dbconfig["name"])
errmsg = runprog_stderr(["sudo", "-u", options.pg_user, "createdb", "-O",
                         dbconfig["username"], dbconfig["name"]])
if errmsg is not None:
    # Couldn't create the DB
    if errmsg.strip().endswith("already exists"):
        logging.info("Database already exists.")
        # The database already exists (most common error)
        # Drop and re-create the database, if the user is absolutely sure
        if not options.force:
            try:
                drop = raw_input("Do you want to delete all existing data? "
                            "THIS WILL DROP YOUR DATABASE!\n[yes/no]> ")
            except (KeyboardInterrupt, EOFError):
                print
                sys.exit(1)
            if drop.strip().lower() != "yes":
                sys.exit(1)
        # OK, here we go

        # Unmount all the jails
        logging.info("Unmounting all users.")
        subprocess.check_call(["ivle-mountallusers", "-u"])

        # Drop database
        logging.info("Dropping database \"%s\"." % dbconfig["name"])
        errmsg = subprocess.check_call(["sudo", "-u", options.pg_user,
                                        "dropdb", dbconfig["name"]])
        # Re-create database
        logging.info("Creating database \"%s\"." % dbconfig["name"])
        errmsg = subprocess.check_call(["sudo", "-u", options.pg_user,
                                        "createdb", "-O",dbconfig["username"],
                                        dbconfig["name"]])
    else:
        logging.error(errmsg.strip())
        sys.exit(1)

# Create "plpgsql" language
logging.info("Creating language plpgsql.")
errmsg = subprocess.check_call(["sudo", "-u", options.pg_user, "createlang",
                         "plpgsql", dbconfig["name"]])

# Populate with database schema
logging.info("Populating database with schema.")
ivleconn = psycopg2.connect(
    host='localhost', database=dbconfig['name'], user=dbconfig['username'],
    password=dbconfig['password'])
ivlecursor = ivleconn.cursor()
logging.info("Populating database with schema.")
schemafile = open("userdb/users.sql")
ivlecursor.execute(schemafile.read())
schemafile.close()

# Build or rebuild all of the users' filesystems and subversion repos
logging.info("Creating data directories.")
subprocess.check_call(["ivle-createdatadirs"])

# Move all of the users' filesystems and subversion repos out of the way
# (This will clean out the user dirs because there are no users in the DB.)
logging.info("Moving existing user filesystems and repos out of the way.")
subprocess.check_call(["ivle-refreshfilesystem"])

# Populate with sample data
logging.info("Populating database with sample data.")
file = open("examples/db/sample.sql")
proc = subprocess.Popen(["sudo", "-u", "postgres", "psql", dbconfig["name"]],
                        stdin=file)
if proc.wait() != 0:
    file.close()
    sys.exit(1)
file.close()

# Build all of the users' filesystems and subversion repos
# (This will create fresh user dirs and repos because the jails were empty.)
logging.info("Building sample users' filesystems and repos.")
subprocess.check_call(["ivle-refreshfilesystem"])

config = Config()
dbconfig = config['database']

# Populate some of the users' Subversion repos
def temp_checkout(svnclient, username):
    """Checkout user `username`'s repo to a temporary directory.
    @return: The temporary workspace directory.
    """
    # Do the checkout over HTTP, since we then use the user's own credentials
    repourl = config['urls']['svn_addr'] + '/users/' + username
    # Ignore warnings about the use of tempnam
    warnings.simplefilter('ignore')
    tempdir = os.tempnam()
    warnings.resetwarnings()
    svnclient.checkout(repourl, tempdir)
    return tempdir

logging.info("Populating student repositories")

svnclient = ivle.svn.create_auth_svn_client_autopass("studenta")
workspace = temp_checkout(svnclient, "studenta")
dirname = os.path.join(workspace, "stuff")
filename = os.path.join(dirname, "hello.py")
if not os.path.isdir(dirname):
    os.makedirs(dirname)
svnclient.add(dirname, force=True)
# XXX Copy files from a sample directory
f = open(filename, "w")
f.write("""\
# Hello IVLE, by Alice Student
# CGI program -- Prints CGI headers, then HTML output

print "Content-Type: text/html"
print
print "<html><body><p>Hello, world!</p></body></html>"
""")
f.close()
svnclient.add(filename, force=True)
svnclient.checkin(workspace, "Added some files")
shutil.rmtree(workspace)
