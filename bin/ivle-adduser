#!/usr/bin/env python
# IVLE - Informatics Virtual Learning Environment
# Copyright (C) 2007-2008 The University of Melbourne
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Program: MakeUser
# Author:  Matt Giuca
# Date:    9/1/2008

# Script to create a new user. This can also be done through the
# administration interface.
# This script wraps common.makeuser.
# It also creates a unix account which common.makeuser does not.
# (This script may not be appropriate for production on a multi-node
# environment).

import sys
import os
import optparse

if os.getuid() != 0:
    print "Must run %s as root." % os.path.basename(sys.argv[0])
    sys.exit(1)

from ivle.config import Config
from ivle.database import get_store, User
from ivle.pulldown_subj import enrol_user

usage = """usage: %prog [OPTIONS] <LOGIN> <FULLNAME>
Creates an IVLE user."""

parser = optparse.OptionParser(usage)
parser.add_option("-p", "--password",
    action="store", dest="password",
    help="Cleartext password"
    )
parser.add_option("-n", "--nick",
    action="store", dest="nick",
    help="Display name (defaults to <FULLNAME>)"
    )
parser.add_option("-e", "--email",
    action="store", dest="email",
    help="Email address"
    )
parser.add_option("-s", "--studentid",
    action="store", dest="studentid",
    help="Student ID"
    )
parser.add_option("--admin",
    action="store_true", dest="admin",
    help="Give the user full administrative privileges",
    default=False
    )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error("incorrect number of arguments")

user = {'login': unicode(args[0]), 'fullname': unicode(args[1])}

for attr in ('password', 'nick', 'email', 'studentid', 'admin'):
    val = getattr(options, attr)
    if val is not None:
        if isinstance(val, str):
            val = unicode(val)
        user[attr] = val

if 'nick' not in user:
    user['nick'] = user['fullname']

config = Config()
store = get_store(config)

if User.get_by_login(store, user['login']) is not None:
    print "user '%s' already exists" % user['login']
    sys.exit(1)

# Make the user's database entry
userobj = User(**user)
store.add(userobj)
enrol_user(config, store, userobj)
store.commit()

print "successfully created user '%s' (%s)." % (userobj.login, userobj.fullname)
